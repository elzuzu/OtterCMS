function t(r){let e=0;function n(){for(;" "===r[e]||"\t"===r[e]||"\n"===r[e];)e++}function o(){return n(),"!"===r[e]?(e++,{type:"UnaryExpression",operator:"!",argument:o()}):"-"===r[e]?(e++,{type:"UnaryExpression",operator:"-",argument:o()}):function(){n();const o=r[e];if("("===o){e++;const o=t();if(n(),")"!==r[e])throw new Error("Expected )");return e++,o}if('"'===o||"'"===o){const t=o;e++;let n="";for(;e<r.length&&r[e]!==t;)n+=r[e++];if(r[e]!==t)throw new Error("Unclosed string");return e++,{type:"Literal",value:n}}const s=/^(?:\d+\.\d+|\d+)/.exec(r.slice(e));if(s)return e+=s[0].length,{type:"Literal",value:parseFloat(s[0])};if(r.startsWith("true",e))return e+=4,{type:"Literal",value:!0};if(r.startsWith("false",e))return e+=5,{type:"Literal",value:!1};if(r.startsWith("null",e))return e+=4,{type:"Literal",value:null};if(r.startsWith("undefined",e))return e+=9,{type:"Literal",value:void 0};throw new Error("Unexpected token at "+e)}()}function s(){let t=o();for(;;){n();const s=r[e];if("*"!==s&&"/"!==s&&"%"!==s)break;e++,t={type:"BinaryExpression",operator:s,left:t,right:o()}}return t}function i(){let t=s();for(;;){n();const o=r[e];if("+"!==o&&"-"!==o)break;e++,t={type:"BinaryExpression",operator:o,left:t,right:s()}}return t}function a(){let t=i();for(;n(),r.startsWith(">=",e)||r.startsWith("<=",e)||">"===r[e]||"<"===r[e];){let n;r.startsWith(">=",e)?(n=">=",e+=2):r.startsWith("<=",e)?(n="<=",e+=2):">"===r[e]?(n=">",e++):(n="<",e++),t={type:"BinaryExpression",operator:n,left:t,right:i()}}return t}function u(){let t=a();for(;n(),r.startsWith("===",e)||r.startsWith("!==",e)||r.startsWith("==",e)||r.startsWith("!=",e);){let n;r.startsWith("===",e)?(n="===",e+=3):r.startsWith("!==",e)?(n="!==",e+=3):r.startsWith("==",e)?(n="==",e+=2):(n="!=",e+=2),t={type:"BinaryExpression",operator:n,left:t,right:a()}}return t}function p(){let t=u();for(;n(),r.startsWith("&&",e);)e+=2,t={type:"LogicalExpression",operator:"&&",left:t,right:u()};return t}const c=function(){let o=function(){let t=p();for(;n(),r.startsWith("||",e);)e+=2,t={type:"LogicalExpression",operator:"||",left:t,right:p()};return t}();if(n(),"?"===r[e]){e++;const s=t();if(n(),":"!==r[e])throw new Error("Expected : in ternary");e++,o={type:"ConditionalExpression",test:o,consequent:s,alternate:t()}}return o}();if(n(),e<r.length)throw new Error("Unexpected input at "+e);return c}function r(t){switch(t.type){case"Literal":return t.value;case"UnaryExpression":if("!"===t.operator)return!r(t.argument);if("-"===t.operator)return-r(t.argument);throw new Error("Unsupported unary "+t.operator);case"BinaryExpression":{const e=r(t.left),n=r(t.right);switch(t.operator){case"+":return e+n;case"-":return e-n;case"*":return e*n;case"/":return e/n;case"%":return e%n;case">":return e>n;case"<":return e<n;case">=":return e>=n;case"<=":return e<=n;case"==":return e==n;case"!=":return e!=n;case"===":return e===n;case"!==":return e!==n;default:throw new Error("Unsupported operator "+t.operator)}}case"LogicalExpression":if("&&"===t.operator)return r(t.left)&&r(t.right);if("||"===t.operator)return r(t.left)||r(t.right);throw new Error("Unsupported logical "+t.operator);case"ConditionalExpression":return r(t.test)?r(t.consequent):r(t.alternate);default:throw new Error("Unknown node type "+t.type)}}function e(e,n={}){if(!e)return"";try{let o=e.replace(/\{([^}]+)\}/g,((t,r)=>JSON.stringify(n[r])));const s=/^\s*if\s+(.*?)\s+then\s+(.*?)\s+else\s+(.*)$/i;s.test(o)&&(o=o.replace(s,"($1 ? $2 : $3)"));const i=r(t(o));return void 0===i?"":i}catch(o){return""}}export{e};
