# Script de build ultra-robuste pour Indi-Suivi - Version amelioree avec UPX optimise

param(
    [switch]$Clean,
    [switch]$InstallDeps,
    [switch]$Verbose,
    [switch]$UseForge,
    [switch]$UsePackager,
    [switch]$SkipNativeDeps,
    [switch]$SkipUPX,
    [int]$UPXLevel = 9,
    [switch]$DownloadElectronLocally,
    [switch]$DownloadTools
)

function Write-ColorText {
    param(
        [string]$Text,
        [string]$Color = "White"
    )
    Write-Host $Text -ForegroundColor $Color
}

function Test-Command {
    param(
        [string]$Command
    )
    (Get-Command $Command -ErrorAction SilentlyContinue) -ne $null
}

$Green = "Green"
$Yellow = "Yellow"
$Red = "Red"
$Cyan = "Cyan"
$Gray = "DarkGray"
$Magenta = "Magenta"
$Blue = "Blue"

Write-ColorText "`nüöÄ D√©marrage du script de build pour Indi-Suivi..." $Green

if ($DownloadTools) {
    Write-ColorText "`nüõ†Ô∏è T√©l√©chargement des outils n√©cessaires..." $Cyan

    # D√©finir un dossier d'outils dans l'espace utilisateur pour √©viter les droits admin
    $toolsPath = Join-Path $env:USERPROFILE "AppData\Local\indi-suivi-tools"

    try {
        # Lancer le script de t√©l√©chargement
        $setupScript = Join-Path $PSScriptRoot 'setup-tools.ps1'
        if (Test-Path $setupScript) {
            Write-ColorText "   Lancement de setup-tools.ps1..." $Gray
            & powershell -ExecutionPolicy Bypass -File $setupScript -ToolsDir $toolsPath

            # Ajouter les outils au PATH de cette session
            $upxPath = Join-Path $toolsPath "upx"
            $sevenPath = Join-Path $toolsPath "7zip"

            if (Test-Path $upxPath) {
                $env:PATH = "$upxPath;$env:PATH"
                Write-ColorText "   ‚úÖ UPX ajout√© au PATH pour cette session" $Green
            }

            if (Test-Path $sevenPath) {
                $env:PATH = "$sevenPath;$env:PATH"
                Write-ColorText "   ‚úÖ 7-Zip ajout√© au PATH pour cette session" $Green
            }

        } else {
            Write-ColorText "   ‚ùå Script setup-tools.ps1 introuvable" $Red
            Write-ColorText "   T√©l√©chargement manuel requis depuis: https://github.com/upx/upx/releases" $Yellow
        }
    } catch {
        Write-ColorText "   ‚ùå Erreur lors du t√©l√©chargement des outils: $($_.Exception.Message)" $Red
        Write-ColorText "   Vous pouvez continuer sans UPX (compression d√©sactiv√©e)" $Yellow
    }
}

trap {
    Write-ColorText "`n‚ùå Une erreur inattendue s'est produite: $_" $Red
    Write-ColorText "Stack trace:" $Red
    Write-ColorText $_.ScriptStackTrace $Gray
    Write-ColorText "`nüîß Suggestions de d√©pannage:" $Yellow
    Write-ColorText "1. Essayez: .\\build.ps1 -UseForge" $Gray
    Write-ColorText "2. Ou bien: .\\build.ps1 -UsePackager" $Gray
    Write-ColorText "3. Ou encore: .\\build.ps1 -InstallDeps -Clean" $Gray
    Write-ColorText "4. Ou encore: .\\build.ps1 -SkipNativeDeps" $Gray
    Write-ColorText "5. V√©rifiez que src/main.js n'a pas d'erreurs" $Gray
    exit 1
}

Write-ColorText "`nüßπ Arr√™t des processus Electron/Node r√©siduels..." $Yellow
Get-Process -Name "electron*", "node*" -ErrorAction SilentlyContinue | Stop-Process -Force
Write-ColorText "   Processus arr√™t√©s." $Green

Write-ColorText "`nüßπ Nettoyage du cache npm..." $Yellow
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
npm cache clean --force
Write-ColorText "   Cache npm nettoy√©." $Green

Write-ColorText "`nüóëÔ∏è Nettoyage des dossiers de build et cache Node.js..." $Yellow
Remove-Item -Path "node_modules", "dist", "out", ".vite", "release-builds" -Recurse -Force -ErrorAction SilentlyContinue
$nodeCacheDirs = @(
    "$env:APPDATA\npm-cache",
    "$env:LOCALAPPDATA\npm-cache"
)
foreach ($cacheDir in $nodeCacheDirs) {
    if (Test-Path $cacheDir) {
        Remove-Item -Path $cacheDir -Recurse -Force -ErrorAction SilentlyContinue
    }
}
Write-ColorText "   Dossiers et caches nettoy√©s." $Green

if (-not $PSBoundParameters.ContainsKey('Clean')) { $Clean = $true }
if (-not $PSBoundParameters.ContainsKey('InstallDeps')) { $InstallDeps = $false }
if (-not $PSBoundParameters.ContainsKey('Verbose')) { $Verbose = $false }

$electronVersion = "37.0.0-beta.2"
$electronArch = "x64"
$electronPlatform = "win32"
$electronZipFileName = "electron-v$electronVersion-$electronPlatform-$electronArch.zip"
$electronDownloadUrl = "https://github.com/electron/electron/releases/download/v$electronVersion/$electronZipFileName"
$electronLocalDownloadDir = Join-Path $PSScriptRoot "electron-local-temp"
$projectRoot = Split-Path -Parent $PSScriptRoot
$electronCacheDir = Join-Path $env:LOCALAPPDATA "electron\Cache"
$electronTargetDistPath = Join-Path $projectRoot "node_modules\electron\dist"

if ($DownloadElectronLocally) {
    Write-ColorText "`n‚¨áÔ∏è T√©l√©chargement local d'Electron $electronVersion pour $electronPlatform-$electronArch..." $Cyan

    if (Test-Path $electronLocalDownloadDir) {
        Remove-Item -Path $electronLocalDownloadDir -Recurse -Force -ErrorAction SilentlyContinue
    }
    New-Item -Path $electronLocalDownloadDir -ItemType Directory | Out-Null

    $downloadedFilePath = Join-Path $electronLocalDownloadDir $electronZipFileName
    Write-ColorText "   T√©l√©chargement de $electronDownloadUrl vers $downloadedFilePath" $Gray
    try {
        Invoke-WebRequest -Uri $electronDownloadUrl -OutFile $downloadedFilePath -UseBasicParsing -Headers @{"User-Agent"="Mozilla/5.0"}
        Write-ColorText "   T√©l√©chargement termin√©." $Green
    } catch {
        Write-ColorText "   ‚ùå √âchec du t√©l√©chargement: $_" $Red
        throw "Impossible de t√©l√©charger Electron $electronVersion"
    }

    Write-ColorText "   Extraction de $downloadedFilePath vers $electronLocalDownloadDir" $Gray
    try {
        Expand-Archive -Path $downloadedFilePath -DestinationPath $electronLocalDownloadDir -Force
        $electronExe = Join-Path $electronLocalDownloadDir "electron.exe"
        if (Test-Path $electronExe) {
            Write-ColorText "   Extraction termin√©e - electron.exe trouv√©." $Green
        } else {
            throw "electron.exe non trouv√© apr√®s extraction"
        }
    } catch {
        Write-ColorText "   ‚ùå √âchec de l'extraction: $_" $Red
        throw "Impossible d'extraire Electron"
    }

    Write-ColorText "`nüìã Pr√©paration du cache Electron local..." $Cyan
    $cacheKey = "httpsgithub.comelectronelectronreleasesdownloadv$electronVersion$electronZipFileName"
    $targetCacheDir = Join-Path $electronCacheDir $cacheKey

    if (-not (Test-Path $electronCacheDir)) {
        New-Item -Path $electronCacheDir -ItemType Directory -Force | Out-Null
    }
    if (-not (Test-Path $targetCacheDir)) {
        New-Item -Path $targetCacheDir -ItemType Directory -Force | Out-Null
    }

    Copy-Item -Path $downloadedFilePath -Destination (Join-Path $targetCacheDir $electronZipFileName) -Force
    Write-ColorText "   Archive copi√©e dans le cache Electron." $Green

    $env:ELECTRON_CACHE = $electronCacheDir
    $env:electron_config_cache = $electronCacheDir
    Write-ColorText "   Variables de cache configur√©es." $Gray
}

if ($InstallDeps -or $DownloadElectronLocally) {
    Write-ColorText "`nüì¶ Installation des d√©pendances npm..." $Cyan

    if ($DownloadElectronLocally) {
        Write-ColorText "   Utilisation du cache Electron local pour √©viter le t√©l√©chargement..." $Gray
    }

    # Configuration pour utiliser les binaires pr√©compil√©s
    $env:npm_config_build_from_source = "false"
    $env:npm_config_node_gyp = ""
    $env:npm_config_better_sqlite3_binary_host_mirror = "https://npmmirror.com/mirrors/better-sqlite3/"
    $env:better_sqlite3_binary_host_mirror = "https://npmmirror.com/mirrors/better-sqlite3/"
    Write-ColorText "   Configuration pour binaires pr√©compil√©s..." $Gray

    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-ColorText "   ‚ùå npm install a √©chou√© - tentative avec ELECTRON_SKIP_BINARY_DOWNLOAD..." $Yellow
        $env:ELECTRON_SKIP_BINARY_DOWNLOAD = "1"
        npm install

        if ($LASTEXITCODE -eq 0 -and $DownloadElectronLocally) {
            Write-ColorText "`nüìã Copie manuelle des fichiers Electron..." $Cyan
            if (-not (Test-Path $electronTargetDistPath)) {
                New-Item -Path $electronTargetDistPath -ItemType Directory -Force | Out-Null
            } else {
                Remove-Item -Path $electronTargetDistPath -Recurse -Force -ErrorAction SilentlyContinue
                New-Item -Path $electronTargetDistPath -ItemType Directory -Force | Out-Null
            }

            $filesToCopy = Get-ChildItem -Path $electronLocalDownloadDir -Exclude "*.zip"
            foreach ($file in $filesToCopy) {
                Copy-Item -Path $file.FullName -Destination $electronTargetDistPath -Recurse -Force
            }
            Write-ColorText "   Copie manuelle termin√©e." $Green
        }

        Remove-Item Env:ELECTRON_SKIP_BINARY_DOWNLOAD -ErrorAction SilentlyContinue
    }

    # V√©rifier imm√©diatement si Vite est pr√©sent, sinon l'installer
    $viteCmd = Join-Path $projectRoot "node_modules\.bin\vite.cmd"
    if (-not (Test-Path $viteCmd)) {
        Write-ColorText "   üì¶ Installation de Vite..." $Yellow
        npm install vite --save-dev
    }

    Write-ColorText "   Installation des d√©pendances termin√©e." $Green
}

if ($DownloadElectronLocally) {
    Write-ColorText "`nüßπ Nettoyage..." $Yellow
    Remove-Item Env:ELECTRON_CACHE -ErrorAction SilentlyContinue
    Remove-Item Env:electron_config_cache -ErrorAction SilentlyContinue
    if (Test-Path $electronLocalDownloadDir) {
        Remove-Item -Path $electronLocalDownloadDir -Recurse -Force -ErrorAction SilentlyContinue
    }
    Write-ColorText "   Nettoyage termin√©." $Green
}


if ($InstallDeps -and -not $SkipNativeDeps) {
    Write-ColorText "`nüõ†Ô∏è Configuration modules natifs..." $Cyan
    npm rebuild --force better-sqlite3
    if ($LASTEXITCODE -ne 0) {
        npx node-pre-gyp install --directory=node_modules/better-sqlite3
    }
    Write-ColorText "   Reconstruction des modules natifs termin√©e." $Green
}

Write-ColorText "`nüèóÔ∏è Lancement du processus de build principal..." $Cyan
if ($UseForge) {
    Write-ColorText "   Utilisation d'Electron Forge." $Blue
    npm run dist:forge
    Write-ColorText "   Build Electron Forge termin√©." $Green
} elseif ($UsePackager) {
    Write-ColorText "   Utilisation d'Electron Packager." $Blue
    npm run dist:packager
    Write-ColorText "   Build Electron Packager termin√©." $Green
} else {
    Write-ColorText "   Lancement du build complet (Vite + Electron)." $Blue
    npm run build
    Write-ColorText "   Build Vite termin√©." $Green
    npm run dist
    Write-ColorText "   Build Electron termin√©." $Green
}

if (-not $SkipUPX) {
    Write-ColorText "`n‚ö° Compression des ex√©cutables avec UPX (niveau $UPXLevel)..." $Cyan

    # V√©rifier UPX dans PATH ou dans le dossier d'outils local
    $upxFound = $false
    $upxCommand = "upx"

    if (Test-Command "upx") {
        $upxFound = $true
        Write-ColorText "   ‚úÖ UPX trouv√© dans le PATH syst√®me" $Green
    } else {
        # Chercher dans le dossier d'outils local
        $localUpx = Join-Path $env:USERPROFILE "AppData\Local\indi-suivi-tools\upx\upx.exe"
        if (Test-Path $localUpx) {
            $upxFound = $true
            $upxCommand = "`"$localUpx`""
            Write-ColorText "   ‚úÖ UPX trouv√© localement: $localUpx" $Green
        }
    }

    if (-not $upxFound) {
        Write-ColorText "   ‚ö†Ô∏è UPX non trouv√©. Utilisez -DownloadTools pour l'installer automatiquement." $Yellow
        Write-ColorText "   Ou t√©l√©chargez depuis: https://github.com/upx/upx/releases" $Yellow
        Write-ColorText "   Saut de l'√©tape de compression UPX." $Yellow
    } else {
        $outputFolders = @("dist", "out", "release-builds")
        $foundExe = $false

        foreach ($folder in $outputFolders) {
            if (Test-Path $folder) {
                $exeFiles = Get-ChildItem -Path $folder -Recurse -Include "*.exe" -ErrorAction SilentlyContinue
                if ($exeFiles.Count -gt 0) {
                    $foundExe = $true
                    foreach ($exe in $exeFiles) {
                        Write-ColorText "      Compression de $($exe.FullName)..." $Gray
                        try {
                            # Utiliser la commande UPX appropri√©e
                            if ($upxCommand -eq "upx") {
                                upx --best -$UPXLevel "$($exe.FullName)"
                            } else {
                                & cmd /c "$upxCommand --best -$UPXLevel `"$($exe.FullName)`""
                            }
                            if ($LASTEXITCODE -eq 0) {
                                Write-ColorText "      ‚úÖ Compress√© avec succ√®s" $Green
                            }
                        } catch {
                            Write-ColorText "      ‚ö†Ô∏è Erreur de compression: $($_.Exception.Message)" $Yellow
                        }
                    }
                }
            }
        }

        if ($foundExe) {
            Write-ColorText "   Compression UPX termin√©e." $Green
        } else {
            Write-ColorText "   ‚ö†Ô∏è Aucun ex√©cutable trouv√© √† compresser." $Yellow
        }
    }
}

Write-ColorText "`nüìä V√©rification des ex√©cutables g√©n√©r√©s..." $Cyan
$outputFolders = @("dist", "out", "release-builds")
$foundFiles = @()
foreach ($folder in $outputFolders) {
    if (Test-Path $folder) {
        $foundFiles += Get-ChildItem -Path $folder -Recurse -Include "*.exe" -ErrorAction SilentlyContinue
    }
}

if ($foundFiles.Count -gt 0) {
    Write-ColorText "   Fichiers ex√©cutables trouv√©s:" $Green
    foreach ($file in $foundFiles) {
        $sizeMB = [math]::Round($file.Length / 1MB, 2)
        Write-ColorText "   - $($file.Name) ($sizeMB MB)" $Gray
        if ($sizeMB -gt 80) {
            Write-ColorText "   ‚ö†Ô∏è Taille encore √©lev√©e. V√©rifiez l'inclusion des d√©pendances." $Yellow
        }
    }

    $mainExe = $foundFiles | Where-Object { $_.Extension -eq '.exe' -and $_.Name -like '*Indi-Suivi*' } | Select-Object -First 1
    if ($mainExe) {
        Write-ColorText "`n‚ÑπÔ∏è Ex√©cutable g√©n√©r√©: $($mainExe.FullName)" $Green
        Write-ColorText "   Lancez-le manuellement pour le tester." $Cyan
    }
} else {
    Write-ColorText "`n‚ö†Ô∏è Aucun fichier ex√©cutable trouv√© dans les dossiers de sortie!" $Yellow
}

Write-ColorText "`n‚úÖ Script de build termin√© avec succ√®s!" $Green
